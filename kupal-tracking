--!nocheck
-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Local Player and Camera
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local originalCameraType = camera.CameraType
local originalCameraSubject = camera.CameraSubject

-- Configuration
local CAMERA_OFFSET = CFrame.new(0, 2, 10) -- Offset from head: (X, Y, Z) - Y is up, Z is distance behind
local MENU_TOGGLE_KEY = Enum.KeyCode.RightControl
local MAX_PLAYERS_TO_CYCLE_LIMIT = 5 -- Absolute maximum for the slider

-- State
local isCyclingActive = false
local selectedTargets = {} -- Table of Player objects
local currentCycleIndex = 1
local maxSelectableTargets = 1 -- Controlled by slider
local menuVisible = true

-- GUI Elements
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KupalTrackerGui"
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 1000

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 280, 0, 450) -- Increased height
mainFrame.Position = UDim2.new(0.02, 0, 0.02, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 2
mainFrame.BorderColor3 = Color3.fromRGB(80, 80, 80)
mainFrame.Draggable = true
mainFrame.Active = true
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, 0, 0, 30)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
titleLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red text
titleLabel.Text = "Kupal Tracking made by consolation â™¥ï¸"
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 16
titleLabel.Parent = mainFrame

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 25, 0, 25)
closeButton.Position = UDim2.new(1, -28, 0, 3)
closeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
closeButton.BorderColor3 = Color3.fromRGB(80,80,80)
closeButton.TextColor3 = Color3.fromRGB(220, 220, 220)
closeButton.Text = "X"
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 16
closeButton.Parent = mainFrame

local toggleCycleButton = Instance.new("TextButton")
toggleCycleButton.Name = "ToggleCycleButton"
toggleCycleButton.Size = UDim2.new(1, -20, 0, 30)
toggleCycleButton.Position = UDim2.new(0, 10, 0, 40)
toggleCycleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
toggleCycleButton.TextColor3 = Color3.fromRGB(200, 200, 200)
toggleCycleButton.Text = "Cycle Targets: OFF"
toggleCycleButton.Font = Enum.Font.SourceSans
toggleCycleButton.TextSize = 16
toggleCycleButton.Parent = mainFrame

local nextTargetButton = Instance.new("TextButton")
nextTargetButton.Name = "NextTargetButton"
nextTargetButton.Size = UDim2.new(1, -20, 0, 30)
nextTargetButton.Position = UDim2.new(0, 10, 0, 80)
nextTargetButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
nextTargetButton.TextColor3 = Color3.fromRGB(200, 200, 200)
nextTargetButton.Text = "Next Target"
nextTargetButton.Font = Enum.Font.SourceSans
nextTargetButton.TextSize = 16
nextTargetButton.Parent = mainFrame

local maxTargetsLabel = Instance.new("TextLabel")
maxTargetsLabel.Name = "MaxTargetsLabel"
maxTargetsLabel.Size = UDim2.new(1, -20, 0, 20)
maxTargetsLabel.Position = UDim2.new(0, 10, 0, 120)
maxTargetsLabel.BackgroundTransparency = 1
maxTargetsLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
maxTargetsLabel.Text = "Max Targets to Cycle: 1"
maxTargetsLabel.Font = Enum.Font.SourceSans
maxTargetsLabel.TextSize = 14
maxTargetsLabel.TextXAlignment = Enum.TextXAlignment.Left
maxTargetsLabel.Parent = mainFrame

local sliderTrack = Instance.new("Frame")
sliderTrack.Name = "SliderTrack"
sliderTrack.Size = UDim2.new(1, -20, 0, 10)
sliderTrack.Position = UDim2.new(0, 10, 0, 145)
sliderTrack.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
sliderTrack.BorderSizePixel = 0
sliderTrack.Parent = mainFrame

local sliderThumb = Instance.new("TextButton") -- Using TextButton for easier click detection
sliderThumb.Name = "SliderThumb"
sliderThumb.Size = UDim2.new(0, 20, 0, 20) -- Thumb slightly larger than track height
sliderThumb.Position = UDim2.new(0, 0, 0.5, -10) -- Centered on track Y
sliderThumb.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
sliderThumb.BorderColor3 = Color3.fromRGB(150,150,255)
sliderThumb.BorderSizePixel = 1
sliderThumb.AutoButtonColor = false
sliderThumb.Text = ""
sliderThumb.Parent = sliderTrack

local playerListLabel = Instance.new("TextLabel")
playerListLabel.Name = "PlayerListLabel"
playerListLabel.Size = UDim2.new(1, -20, 0, 20)
playerListLabel.Position = UDim2.new(0, 10, 0, 175) -- Adjusted Y
playerListLabel.BackgroundTransparency = 1
playerListLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
playerListLabel.Text = "Select Players (Max " .. maxSelectableTargets .. "):"
playerListLabel.Font = Enum.Font.SourceSans
playerListLabel.TextSize = 14
playerListLabel.TextXAlignment = Enum.TextXAlignment.Left
playerListLabel.Parent = mainFrame

local playerListFrame = Instance.new("ScrollingFrame")
playerListFrame.Name = "PlayerListFrame"
playerListFrame.Size = UDim2.new(1, -20, 0, mainFrame.Size.Y.Offset - 205 - 25) -- Adjusted Y and height
playerListFrame.Position = UDim2.new(0, 10, 0, 200) -- Adjusted Y
playerListFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
playerListFrame.BorderSizePixel = 1
playerListFrame.BorderColor3 = Color3.fromRGB(60, 60, 60)
playerListFrame.CanvasSize = UDim2.new(0,0,0,0)
playerListFrame.ScrollBarThickness = 6
playerListFrame.Parent = mainFrame

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Parent = playerListFrame
uiListLayout.Padding = UDim.new(0, 5)
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder

local menuInfoLabel = Instance.new("TextLabel")
menuInfoLabel.Name = "MenuInfoLabel"
menuInfoLabel.Size = UDim2.new(1, 0, 0, 20)
menuInfoLabel.Position = UDim2.new(0,0,1,-20)
menuInfoLabel.BackgroundTransparency = 1
menuInfoLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
menuInfoLabel.Text = "Press RightControl to toggle menu"
menuInfoLabel.Font = Enum.Font.SourceSansItalic
menuInfoLabel.TextSize = 12
menuInfoLabel.Parent = mainFrame

-- Slider Logic
local isDraggingSlider = false

local function updateSliderThumbPosition()
	local trackWidth = sliderTrack.AbsoluteSize.X - sliderThumb.AbsoluteSize.X
	local percent = (maxSelectableTargets - 1) / math.max(1, MAX_PLAYERS_TO_CYCLE_LIMIT - 1)
	if MAX_PLAYERS_TO_CYCLE_LIMIT == 1 then percent = 0 end -- Avoid division by zero if limit is 1
	sliderThumb.Position = UDim2.new(0, trackWidth * percent, sliderThumb.Position.Y.Scale, sliderThumb.Position.Y.Offset)
end

local function updateMaxSelectableTargetsFromSlider(mouseX)
	local relativeMouseX = mouseX - sliderTrack.AbsolutePosition.X
	local trackWidth = sliderTrack.AbsoluteSize.X - sliderThumb.AbsoluteSize.X
	local percent = math.clamp(relativeMouseX / math.max(1, trackWidth), 0, 1)
	
	local newValue = math.floor(1 + percent * (MAX_PLAYERS_TO_CYCLE_LIMIT - 1) + 0.5)
	if newValue ~= maxSelectableTargets then
		maxSelectableTargets = newValue
		maxTargetsLabel.Text = "Max Targets to Cycle: " .. maxSelectableTargets
		playerListLabel.Text = "Select Players (Max " .. maxSelectableTargets .. "):"
		updateSliderThumbPosition()

		-- If current selection exceeds new max, trim it
		while #selectedTargets > maxSelectableTargets do
			local removedPlayer = table.remove(selectedTargets) -- Remove from end
			-- Update button UI for removedPlayer
			local btn = playerListFrame:FindFirstChild(removedPlayer.Name)
			if btn then
				btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
				btn.TextColor3 = Color3.fromRGB(200,200,200)
			end
		end
		if #selectedTargets == 0 then
			currentCycleIndex = 1
		else
			currentCycleIndex = math.min(currentCycleIndex, #selectedTargets)
		end
	end
end

sliderTrack.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		isDraggingSlider = true
		updateMaxSelectableTargetsFromSlider(input.Position.X)
	end
end)

sliderThumb.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		isDraggingSlider = true
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if isDraggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
		updateMaxSelectableTargetsFromSlider(input.Position.X)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		isDraggingSlider = false
	end
end)


-- Functions
local function updatePlayerList()
	-- Store current button states to reapply highlights
	local selectedPlayerNames = {}
	for _, p in ipairs(selectedTargets) do
		selectedPlayerNames[p.Name] = true
	end

	for _, child in ipairs(playerListFrame:GetChildren()) do
		if child:IsA("TextButton") then
			child:Destroy()
		end
	end

	local layoutOrder = 0
	for _, playerObj in ipairs(Players:GetPlayers()) do
		if playerObj ~= localPlayer then
			local playerButton = Instance.new("TextButton")
			playerButton.Name = playerObj.Name
			playerButton.Size = UDim2.new(1, 0, 0, 25)
			playerButton.Text = playerObj.DisplayName .. " (@" .. playerObj.Name .. ")"
			playerButton.Font = Enum.Font.SourceSans
			playerButton.TextSize = 14
			playerButton.LayoutOrder = layoutOrder
			playerButton.Parent = playerListFrame

			if selectedPlayerNames[playerObj.Name] then
				playerButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
				playerButton.TextColor3 = Color3.fromRGB(230,230,230)
			else
				playerButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
				playerButton.TextColor3 = Color3.fromRGB(200, 200, 200)
			end
			
			playerButton.MouseButton1Click:Connect(function()
				local foundIndex = table.find(selectedTargets, playerObj)
				if foundIndex then -- Player is selected, deselect
					table.remove(selectedTargets, foundIndex)
					playerButton.BackgroundColor3 = Color3.fromRGB(60,60,60)
					playerButton.TextColor3 = Color3.fromRGB(200,200,200)
					if #selectedTargets == 0 then
						currentCycleIndex = 1
						if isCyclingActive then -- Stop cycling if no targets left
							isCyclingActive = false
							camera.CameraType = originalCameraType
							camera.CameraSubject = originalCameraSubject
							toggleCycleButton.Text = "Cycle Targets: OFF"
							toggleCycleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
						end
					elseif currentCycleIndex > #selectedTargets then
						currentCycleIndex = #selectedTargets -- Adjust index if it's out of bounds
					end
				else -- Player is not selected, try to select
					if #selectedTargets < maxSelectableTargets then
						table.insert(selectedTargets, playerObj)
						playerButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
						playerButton.TextColor3 = Color3.fromRGB(230,230,230)
					else
						-- Optionally, provide feedback that max targets are selected
						-- For now, just don't select.
					end
				end
			end)
			layoutOrder = layoutOrder + 1
		end
	end
end

local function onCycleToggled()
	isCyclingActive = not isCyclingActive
	if isCyclingActive then
		if #selectedTargets > 0 then
			originalCameraType = camera.CameraType
			originalCameraSubject = camera.CameraSubject
			camera.CameraType = Enum.CameraType.Scriptable
			toggleCycleButton.Text = "Cycle Targets: ON"
			toggleCycleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
			currentCycleIndex = math.max(1, math.min(currentCycleIndex, #selectedTargets)) -- Ensure valid index
		else
			isCyclingActive = false -- Can't cycle if no targets
			toggleCycleButton.Text = "Cycle: OFF (No Targets)"
			toggleCycleButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
			-- print("Kupal Tracker: No targets selected to cycle.")
		end
	else
		camera.CameraType = originalCameraType
		camera.CameraSubject = originalCameraSubject
		toggleCycleButton.Text = "Cycle Targets: OFF"
		toggleCycleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	end
end

local function onNextTargetClicked()
	if isCyclingActive and #selectedTargets > 0 then
		currentCycleIndex = (currentCycleIndex % #selectedTargets) + 1
	elseif #selectedTargets > 0 then -- Not cycling, but can set the starting point
		currentCycleIndex = (currentCycleIndex % #selectedTargets) + 1
        -- If user wants to immediately start cycling on "Next Target" when off:
        -- onCycleToggled()
	end
end

local function onRenderStepped()
	if not isCyclingActive or #selectedTargets == 0 then
		return
	end

	local currentTargetPlayer = selectedTargets[currentCycleIndex]
	if not currentTargetPlayer or not Players:FindFirstChild(currentTargetPlayer.Name) then
		-- Target player left or is invalid, remove from list and adjust
		table.remove(selectedTargets, currentCycleIndex)
		if #selectedTargets == 0 then
			isCyclingActive = false
			camera.CameraType = originalCameraType
			camera.CameraSubject = originalCameraSubject
			toggleCycleButton.Text = "Cycle Targets: OFF"
			toggleCycleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
			updatePlayerList()
			return
		end
		currentCycleIndex = math.max(1, math.min(currentCycleIndex, #selectedTargets))
		updatePlayerList() -- Refresh list as player might be gone
		currentTargetPlayer = selectedTargets[currentCycleIndex] -- Get new current target
		if not currentTargetPlayer then return end -- Should not happen if list is not empty
	end
	
	local targetCharacter = currentTargetPlayer.Character
	if targetCharacter then
		local targetHead = targetCharacter:FindFirstChild("Head")
		if targetHead then
			local headCFrame = targetHead.CFrame
			local targetCamCFrame = headCFrame * CAMERA_OFFSET
			
			-- Smooth camera transition (optional, can be demanding)
			-- camera.CFrame = camera.CFrame:Lerp(targetCamCFrame, 0.1) -- Adjust 0.1 for speed
			camera.CFrame = targetCamCFrame -- Direct set for now
			camera.Focus = headCFrame
		else
			-- Head not found, character might be dead or incomplete
			-- Wait for respawn or manual "Next Target"
		end
	else
		-- Character not found
		-- Wait for respawn or manual "Next Target"
	end
end

local function onPlayerAdded(player)
	updatePlayerList()
	-- No specific character added logic needed here beyond list update
end

local function onPlayerRemoving(player)
	local removed = false
	for i = #selectedTargets, 1, -1 do
		if selectedTargets[i] == player then
			table.remove(selectedTargets, i)
			removed = true
		end
	end

	if removed then
		if #selectedTargets == 0 then
			currentCycleIndex = 1
			if isCyclingActive then
				isCyclingActive = false
				camera.CameraType = originalCameraType
				camera.CameraSubject = originalCameraSubject
				toggleCycleButton.Text = "Cycle Targets: OFF"
				toggleCycleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
			end
		else
			currentCycleIndex = math.max(1, math.min(currentCycleIndex, #selectedTargets))
		end
	end
	updatePlayerList()
end

local function onInputBegan(input, gameProcessedEvent)
	if gameProcessedEvent and not (input.UserInputType == Enum.UserInputType.MouseButton1 and isDraggingSlider) then return end

	if input.KeyCode == MENU_TOGGLE_KEY then
		menuVisible = not menuVisible
		mainFrame.Visible = menuVisible
	end
end

closeButton.MouseButton1Click:Connect(function()
	menuVisible = false
	mainFrame.Visible = false
end)

-- Initial Setup
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
updatePlayerList()
updateSliderThumbPosition() -- Set initial thumb position

-- Connections
toggleCycleButton.MouseButton1Click:Connect(onCycleToggled)
nextTargetButton.MouseButton1Click:Connect(onNextTargetClicked)
RunService.RenderStepped:Connect(onRenderStepped)
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)
UserInputService.InputBegan:Connect(onInputBegan)

print("Kupal Tracking (Multi-Target Cycle) Loaded. Press RightControl to toggle menu.")
